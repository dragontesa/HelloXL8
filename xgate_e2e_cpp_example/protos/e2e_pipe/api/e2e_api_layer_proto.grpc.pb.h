// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: e2e_api_layer_proto.proto
#ifndef GRPC_e2e_5fapi_5flayer_5fproto_2eproto__INCLUDED
#define GRPC_e2e_5fapi_5flayer_5fproto_2eproto__INCLUDED

#include "e2e_api_layer_proto.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace e2e_pipe {
namespace api {

// A service that Speech-to-Speech API layer will serve.
class E2eApiService final {
 public:
  static constexpr char const* service_full_name() {
    return "e2e_pipe.api.E2eApiService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Initialize the API service.
    virtual ::grpc::Status InitE2e(::grpc::ClientContext* context, const ::e2e_pipe::api::E2eApiInitRequest& request, ::e2e_pipe::api::E2eApiInitResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::e2e_pipe::api::E2eApiInitResponse>> AsyncInitE2e(::grpc::ClientContext* context, const ::e2e_pipe::api::E2eApiInitRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::e2e_pipe::api::E2eApiInitResponse>>(AsyncInitE2eRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::e2e_pipe::api::E2eApiInitResponse>> PrepareAsyncInitE2e(::grpc::ClientContext* context, const ::e2e_pipe::api::E2eApiInitRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::e2e_pipe::api::E2eApiInitResponse>>(PrepareAsyncInitE2eRaw(context, request, cq));
    }
    // Process a translation request.
    virtual ::grpc::Status TransE2e(::grpc::ClientContext* context, const ::e2e_pipe::api::E2eApiTransRequest& request, ::e2e_pipe::api::E2eApiTransResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::e2e_pipe::api::E2eApiTransResponse>> AsyncTransE2e(::grpc::ClientContext* context, const ::e2e_pipe::api::E2eApiTransRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::e2e_pipe::api::E2eApiTransResponse>>(AsyncTransE2eRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::e2e_pipe::api::E2eApiTransResponse>> PrepareAsyncTransE2e(::grpc::ClientContext* context, const ::e2e_pipe::api::E2eApiTransRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::e2e_pipe::api::E2eApiTransResponse>>(PrepareAsyncTransE2eRaw(context, request, cq));
    }
    // Close the API service.
    virtual ::grpc::Status CloseE2e(::grpc::ClientContext* context, const ::e2e_pipe::api::E2eApiCloseRequest& request, ::e2e_pipe::api::E2eApiCloseResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::e2e_pipe::api::E2eApiCloseResponse>> AsyncCloseE2e(::grpc::ClientContext* context, const ::e2e_pipe::api::E2eApiCloseRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::e2e_pipe::api::E2eApiCloseResponse>>(AsyncCloseE2eRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::e2e_pipe::api::E2eApiCloseResponse>> PrepareAsyncCloseE2e(::grpc::ClientContext* context, const ::e2e_pipe::api::E2eApiCloseRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::e2e_pipe::api::E2eApiCloseResponse>>(PrepareAsyncCloseE2eRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Initialize the API service.
      virtual void InitE2e(::grpc::ClientContext* context, const ::e2e_pipe::api::E2eApiInitRequest* request, ::e2e_pipe::api::E2eApiInitResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void InitE2e(::grpc::ClientContext* context, const ::e2e_pipe::api::E2eApiInitRequest* request, ::e2e_pipe::api::E2eApiInitResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Process a translation request.
      virtual void TransE2e(::grpc::ClientContext* context, const ::e2e_pipe::api::E2eApiTransRequest* request, ::e2e_pipe::api::E2eApiTransResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void TransE2e(::grpc::ClientContext* context, const ::e2e_pipe::api::E2eApiTransRequest* request, ::e2e_pipe::api::E2eApiTransResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Close the API service.
      virtual void CloseE2e(::grpc::ClientContext* context, const ::e2e_pipe::api::E2eApiCloseRequest* request, ::e2e_pipe::api::E2eApiCloseResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CloseE2e(::grpc::ClientContext* context, const ::e2e_pipe::api::E2eApiCloseRequest* request, ::e2e_pipe::api::E2eApiCloseResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::e2e_pipe::api::E2eApiInitResponse>* AsyncInitE2eRaw(::grpc::ClientContext* context, const ::e2e_pipe::api::E2eApiInitRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::e2e_pipe::api::E2eApiInitResponse>* PrepareAsyncInitE2eRaw(::grpc::ClientContext* context, const ::e2e_pipe::api::E2eApiInitRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::e2e_pipe::api::E2eApiTransResponse>* AsyncTransE2eRaw(::grpc::ClientContext* context, const ::e2e_pipe::api::E2eApiTransRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::e2e_pipe::api::E2eApiTransResponse>* PrepareAsyncTransE2eRaw(::grpc::ClientContext* context, const ::e2e_pipe::api::E2eApiTransRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::e2e_pipe::api::E2eApiCloseResponse>* AsyncCloseE2eRaw(::grpc::ClientContext* context, const ::e2e_pipe::api::E2eApiCloseRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::e2e_pipe::api::E2eApiCloseResponse>* PrepareAsyncCloseE2eRaw(::grpc::ClientContext* context, const ::e2e_pipe::api::E2eApiCloseRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status InitE2e(::grpc::ClientContext* context, const ::e2e_pipe::api::E2eApiInitRequest& request, ::e2e_pipe::api::E2eApiInitResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::e2e_pipe::api::E2eApiInitResponse>> AsyncInitE2e(::grpc::ClientContext* context, const ::e2e_pipe::api::E2eApiInitRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::e2e_pipe::api::E2eApiInitResponse>>(AsyncInitE2eRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::e2e_pipe::api::E2eApiInitResponse>> PrepareAsyncInitE2e(::grpc::ClientContext* context, const ::e2e_pipe::api::E2eApiInitRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::e2e_pipe::api::E2eApiInitResponse>>(PrepareAsyncInitE2eRaw(context, request, cq));
    }
    ::grpc::Status TransE2e(::grpc::ClientContext* context, const ::e2e_pipe::api::E2eApiTransRequest& request, ::e2e_pipe::api::E2eApiTransResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::e2e_pipe::api::E2eApiTransResponse>> AsyncTransE2e(::grpc::ClientContext* context, const ::e2e_pipe::api::E2eApiTransRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::e2e_pipe::api::E2eApiTransResponse>>(AsyncTransE2eRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::e2e_pipe::api::E2eApiTransResponse>> PrepareAsyncTransE2e(::grpc::ClientContext* context, const ::e2e_pipe::api::E2eApiTransRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::e2e_pipe::api::E2eApiTransResponse>>(PrepareAsyncTransE2eRaw(context, request, cq));
    }
    ::grpc::Status CloseE2e(::grpc::ClientContext* context, const ::e2e_pipe::api::E2eApiCloseRequest& request, ::e2e_pipe::api::E2eApiCloseResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::e2e_pipe::api::E2eApiCloseResponse>> AsyncCloseE2e(::grpc::ClientContext* context, const ::e2e_pipe::api::E2eApiCloseRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::e2e_pipe::api::E2eApiCloseResponse>>(AsyncCloseE2eRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::e2e_pipe::api::E2eApiCloseResponse>> PrepareAsyncCloseE2e(::grpc::ClientContext* context, const ::e2e_pipe::api::E2eApiCloseRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::e2e_pipe::api::E2eApiCloseResponse>>(PrepareAsyncCloseE2eRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void InitE2e(::grpc::ClientContext* context, const ::e2e_pipe::api::E2eApiInitRequest* request, ::e2e_pipe::api::E2eApiInitResponse* response, std::function<void(::grpc::Status)>) override;
      void InitE2e(::grpc::ClientContext* context, const ::e2e_pipe::api::E2eApiInitRequest* request, ::e2e_pipe::api::E2eApiInitResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void TransE2e(::grpc::ClientContext* context, const ::e2e_pipe::api::E2eApiTransRequest* request, ::e2e_pipe::api::E2eApiTransResponse* response, std::function<void(::grpc::Status)>) override;
      void TransE2e(::grpc::ClientContext* context, const ::e2e_pipe::api::E2eApiTransRequest* request, ::e2e_pipe::api::E2eApiTransResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CloseE2e(::grpc::ClientContext* context, const ::e2e_pipe::api::E2eApiCloseRequest* request, ::e2e_pipe::api::E2eApiCloseResponse* response, std::function<void(::grpc::Status)>) override;
      void CloseE2e(::grpc::ClientContext* context, const ::e2e_pipe::api::E2eApiCloseRequest* request, ::e2e_pipe::api::E2eApiCloseResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::e2e_pipe::api::E2eApiInitResponse>* AsyncInitE2eRaw(::grpc::ClientContext* context, const ::e2e_pipe::api::E2eApiInitRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::e2e_pipe::api::E2eApiInitResponse>* PrepareAsyncInitE2eRaw(::grpc::ClientContext* context, const ::e2e_pipe::api::E2eApiInitRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::e2e_pipe::api::E2eApiTransResponse>* AsyncTransE2eRaw(::grpc::ClientContext* context, const ::e2e_pipe::api::E2eApiTransRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::e2e_pipe::api::E2eApiTransResponse>* PrepareAsyncTransE2eRaw(::grpc::ClientContext* context, const ::e2e_pipe::api::E2eApiTransRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::e2e_pipe::api::E2eApiCloseResponse>* AsyncCloseE2eRaw(::grpc::ClientContext* context, const ::e2e_pipe::api::E2eApiCloseRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::e2e_pipe::api::E2eApiCloseResponse>* PrepareAsyncCloseE2eRaw(::grpc::ClientContext* context, const ::e2e_pipe::api::E2eApiCloseRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_InitE2e_;
    const ::grpc::internal::RpcMethod rpcmethod_TransE2e_;
    const ::grpc::internal::RpcMethod rpcmethod_CloseE2e_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Initialize the API service.
    virtual ::grpc::Status InitE2e(::grpc::ServerContext* context, const ::e2e_pipe::api::E2eApiInitRequest* request, ::e2e_pipe::api::E2eApiInitResponse* response);
    // Process a translation request.
    virtual ::grpc::Status TransE2e(::grpc::ServerContext* context, const ::e2e_pipe::api::E2eApiTransRequest* request, ::e2e_pipe::api::E2eApiTransResponse* response);
    // Close the API service.
    virtual ::grpc::Status CloseE2e(::grpc::ServerContext* context, const ::e2e_pipe::api::E2eApiCloseRequest* request, ::e2e_pipe::api::E2eApiCloseResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_InitE2e : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_InitE2e() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_InitE2e() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InitE2e(::grpc::ServerContext* /*context*/, const ::e2e_pipe::api::E2eApiInitRequest* /*request*/, ::e2e_pipe::api::E2eApiInitResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInitE2e(::grpc::ServerContext* context, ::e2e_pipe::api::E2eApiInitRequest* request, ::grpc::ServerAsyncResponseWriter< ::e2e_pipe::api::E2eApiInitResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_TransE2e : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_TransE2e() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_TransE2e() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TransE2e(::grpc::ServerContext* /*context*/, const ::e2e_pipe::api::E2eApiTransRequest* /*request*/, ::e2e_pipe::api::E2eApiTransResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTransE2e(::grpc::ServerContext* context, ::e2e_pipe::api::E2eApiTransRequest* request, ::grpc::ServerAsyncResponseWriter< ::e2e_pipe::api::E2eApiTransResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CloseE2e : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CloseE2e() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_CloseE2e() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CloseE2e(::grpc::ServerContext* /*context*/, const ::e2e_pipe::api::E2eApiCloseRequest* /*request*/, ::e2e_pipe::api::E2eApiCloseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCloseE2e(::grpc::ServerContext* context, ::e2e_pipe::api::E2eApiCloseRequest* request, ::grpc::ServerAsyncResponseWriter< ::e2e_pipe::api::E2eApiCloseResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_InitE2e<WithAsyncMethod_TransE2e<WithAsyncMethod_CloseE2e<Service > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_InitE2e : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_InitE2e() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::e2e_pipe::api::E2eApiInitRequest, ::e2e_pipe::api::E2eApiInitResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::e2e_pipe::api::E2eApiInitRequest* request, ::e2e_pipe::api::E2eApiInitResponse* response) { return this->InitE2e(context, request, response); }));}
    void SetMessageAllocatorFor_InitE2e(
        ::grpc::MessageAllocator< ::e2e_pipe::api::E2eApiInitRequest, ::e2e_pipe::api::E2eApiInitResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::e2e_pipe::api::E2eApiInitRequest, ::e2e_pipe::api::E2eApiInitResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_InitE2e() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InitE2e(::grpc::ServerContext* /*context*/, const ::e2e_pipe::api::E2eApiInitRequest* /*request*/, ::e2e_pipe::api::E2eApiInitResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* InitE2e(
      ::grpc::CallbackServerContext* /*context*/, const ::e2e_pipe::api::E2eApiInitRequest* /*request*/, ::e2e_pipe::api::E2eApiInitResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_TransE2e : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_TransE2e() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::e2e_pipe::api::E2eApiTransRequest, ::e2e_pipe::api::E2eApiTransResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::e2e_pipe::api::E2eApiTransRequest* request, ::e2e_pipe::api::E2eApiTransResponse* response) { return this->TransE2e(context, request, response); }));}
    void SetMessageAllocatorFor_TransE2e(
        ::grpc::MessageAllocator< ::e2e_pipe::api::E2eApiTransRequest, ::e2e_pipe::api::E2eApiTransResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::e2e_pipe::api::E2eApiTransRequest, ::e2e_pipe::api::E2eApiTransResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_TransE2e() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TransE2e(::grpc::ServerContext* /*context*/, const ::e2e_pipe::api::E2eApiTransRequest* /*request*/, ::e2e_pipe::api::E2eApiTransResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* TransE2e(
      ::grpc::CallbackServerContext* /*context*/, const ::e2e_pipe::api::E2eApiTransRequest* /*request*/, ::e2e_pipe::api::E2eApiTransResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CloseE2e : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CloseE2e() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::e2e_pipe::api::E2eApiCloseRequest, ::e2e_pipe::api::E2eApiCloseResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::e2e_pipe::api::E2eApiCloseRequest* request, ::e2e_pipe::api::E2eApiCloseResponse* response) { return this->CloseE2e(context, request, response); }));}
    void SetMessageAllocatorFor_CloseE2e(
        ::grpc::MessageAllocator< ::e2e_pipe::api::E2eApiCloseRequest, ::e2e_pipe::api::E2eApiCloseResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::e2e_pipe::api::E2eApiCloseRequest, ::e2e_pipe::api::E2eApiCloseResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CloseE2e() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CloseE2e(::grpc::ServerContext* /*context*/, const ::e2e_pipe::api::E2eApiCloseRequest* /*request*/, ::e2e_pipe::api::E2eApiCloseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CloseE2e(
      ::grpc::CallbackServerContext* /*context*/, const ::e2e_pipe::api::E2eApiCloseRequest* /*request*/, ::e2e_pipe::api::E2eApiCloseResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_InitE2e<WithCallbackMethod_TransE2e<WithCallbackMethod_CloseE2e<Service > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_InitE2e : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_InitE2e() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_InitE2e() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InitE2e(::grpc::ServerContext* /*context*/, const ::e2e_pipe::api::E2eApiInitRequest* /*request*/, ::e2e_pipe::api::E2eApiInitResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_TransE2e : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_TransE2e() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_TransE2e() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TransE2e(::grpc::ServerContext* /*context*/, const ::e2e_pipe::api::E2eApiTransRequest* /*request*/, ::e2e_pipe::api::E2eApiTransResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CloseE2e : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CloseE2e() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_CloseE2e() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CloseE2e(::grpc::ServerContext* /*context*/, const ::e2e_pipe::api::E2eApiCloseRequest* /*request*/, ::e2e_pipe::api::E2eApiCloseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_InitE2e : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_InitE2e() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_InitE2e() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InitE2e(::grpc::ServerContext* /*context*/, const ::e2e_pipe::api::E2eApiInitRequest* /*request*/, ::e2e_pipe::api::E2eApiInitResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInitE2e(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_TransE2e : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_TransE2e() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_TransE2e() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TransE2e(::grpc::ServerContext* /*context*/, const ::e2e_pipe::api::E2eApiTransRequest* /*request*/, ::e2e_pipe::api::E2eApiTransResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTransE2e(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CloseE2e : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CloseE2e() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_CloseE2e() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CloseE2e(::grpc::ServerContext* /*context*/, const ::e2e_pipe::api::E2eApiCloseRequest* /*request*/, ::e2e_pipe::api::E2eApiCloseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCloseE2e(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_InitE2e : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_InitE2e() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->InitE2e(context, request, response); }));
    }
    ~WithRawCallbackMethod_InitE2e() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InitE2e(::grpc::ServerContext* /*context*/, const ::e2e_pipe::api::E2eApiInitRequest* /*request*/, ::e2e_pipe::api::E2eApiInitResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* InitE2e(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_TransE2e : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_TransE2e() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->TransE2e(context, request, response); }));
    }
    ~WithRawCallbackMethod_TransE2e() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TransE2e(::grpc::ServerContext* /*context*/, const ::e2e_pipe::api::E2eApiTransRequest* /*request*/, ::e2e_pipe::api::E2eApiTransResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* TransE2e(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CloseE2e : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CloseE2e() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CloseE2e(context, request, response); }));
    }
    ~WithRawCallbackMethod_CloseE2e() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CloseE2e(::grpc::ServerContext* /*context*/, const ::e2e_pipe::api::E2eApiCloseRequest* /*request*/, ::e2e_pipe::api::E2eApiCloseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CloseE2e(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_InitE2e : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_InitE2e() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::e2e_pipe::api::E2eApiInitRequest, ::e2e_pipe::api::E2eApiInitResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::e2e_pipe::api::E2eApiInitRequest, ::e2e_pipe::api::E2eApiInitResponse>* streamer) {
                       return this->StreamedInitE2e(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_InitE2e() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status InitE2e(::grpc::ServerContext* /*context*/, const ::e2e_pipe::api::E2eApiInitRequest* /*request*/, ::e2e_pipe::api::E2eApiInitResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedInitE2e(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::e2e_pipe::api::E2eApiInitRequest,::e2e_pipe::api::E2eApiInitResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_TransE2e : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_TransE2e() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::e2e_pipe::api::E2eApiTransRequest, ::e2e_pipe::api::E2eApiTransResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::e2e_pipe::api::E2eApiTransRequest, ::e2e_pipe::api::E2eApiTransResponse>* streamer) {
                       return this->StreamedTransE2e(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_TransE2e() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status TransE2e(::grpc::ServerContext* /*context*/, const ::e2e_pipe::api::E2eApiTransRequest* /*request*/, ::e2e_pipe::api::E2eApiTransResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedTransE2e(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::e2e_pipe::api::E2eApiTransRequest,::e2e_pipe::api::E2eApiTransResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CloseE2e : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CloseE2e() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::e2e_pipe::api::E2eApiCloseRequest, ::e2e_pipe::api::E2eApiCloseResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::e2e_pipe::api::E2eApiCloseRequest, ::e2e_pipe::api::E2eApiCloseResponse>* streamer) {
                       return this->StreamedCloseE2e(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CloseE2e() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CloseE2e(::grpc::ServerContext* /*context*/, const ::e2e_pipe::api::E2eApiCloseRequest* /*request*/, ::e2e_pipe::api::E2eApiCloseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCloseE2e(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::e2e_pipe::api::E2eApiCloseRequest,::e2e_pipe::api::E2eApiCloseResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_InitE2e<WithStreamedUnaryMethod_TransE2e<WithStreamedUnaryMethod_CloseE2e<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_InitE2e<WithStreamedUnaryMethod_TransE2e<WithStreamedUnaryMethod_CloseE2e<Service > > > StreamedService;
};

}  // namespace api
}  // namespace e2e_pipe


#endif  // GRPC_e2e_5fapi_5flayer_5fproto_2eproto__INCLUDED
